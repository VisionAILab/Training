from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

classifier = Sequential()

classifier.add(Convolution2D(32, 3, 3, input_shape = (64, 64, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2,2)))
classifier.add(Flatten())
classifier.add(Dense(output_dim = 128, activation = 'relu'))
classifier.add(Dense(output_dim = 1, activation = 'sigmoid')) #we are using sigmoid here because we have a binary outcome.....either cat or dog
# If we have more than two outcomes we will use softmax.

classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

training_set = train_datagen.flow_from_directory('F:/kagglecatsanddogs_3367a/PetImages/Training', 
                                                 target_size=(64, 64), batch_size=32, class_mode='binary')

test_set = test_datagen.flow_from_directory('F:/kagglecatsanddogs_3367a/PetImages/Test', 
                                            target_size=(64, 64), batch_size=32, class_mode='binary')

classifier.fit_generator(training_set, samples_per_epoch=2000, nb_epoch=5, validation_data=test_set, nb_val_samples=500)